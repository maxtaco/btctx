// Generated by IcedCoffeeScript 1.7.1-f
(function() {
  var chain, fs, iced, make_esc, tail, __iced_k, __iced_k_noop, _ref;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  fs = require('fs');

  _ref = require('iced-error'), chain = _ref.chain, make_esc = _ref.make_esc;

  module.exports = tail = function(fn, bytes, cb) {
    var buf, esc, fd, offset, stat, sz, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    fd = -1;
    cb = chain(cb, function(lcb) {
      var err, ___iced_passed_deferral1, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral1 = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          if (fd >= 0) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral1,
                filename: "/Users/max/src/iced/iced-utils/src/tail.iced"
              });
              fs.close(fd, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 11
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return lcb();
        };
      })(this));
    });
    esc = make_esc(cb, "tail");
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/iced/iced-utils/src/tail.iced"
        });
        fs.open(fn, "r", esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return fd = arguments[0];
            };
          })(),
          lineno: 15
        })));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/iced/iced-utils/src/tail.iced"
          });
          fs.fstat(fd, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return stat = arguments[0];
              };
            })(),
            lineno: 16
          })));
          __iced_deferrals._fulfill();
        })(function() {
          sz = stat.size;
          offset = sz - bytes;
          if (offset < 0) {
            bytes = sz;
            offset = 0;
          }
          buf = new Buffer(bytes);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/iced/iced-utils/src/tail.iced"
            });
            fs.read(fd, buf, 0, bytes, offset, esc(__iced_deferrals.defer({
              lineno: 23
            })));
            __iced_deferrals._fulfill();
          })(function() {
            return cb(null, buf);
          });
        });
      };
    })(this));
  };

}).call(this);
